- name: "Check that oc binary is installed"
  stat:
    path: "{{ oc_binary }}"
  register: oc_installed

- block:
  - name: "Fetch page content for latest client binary archive"
    uri: 
      url: "{{ release_url }}"
      return_content: yes
    register: client_page
    until: client_page is success
    retries: 12
    delay: 10

  - name: "Determine latest client binary archive release"
    set_fact:
      release_ver: "{{ client_page.content | regex_findall('<a.*openshift-client-linux[^<]+?>') | first | regex_search('o.*\\d[-.0-9]+\\d') }}"

  - name: "Set variables for {{ release_ver }}"
    set_fact:
      oc_release_url: "{{ release_url }}/{{ release_ver }}.tar.gz"
      oc_arch: "{{ oc_target_location }}/{{ release_ver }}/client.tar.gz"
    
  - name: "Create binary directory"
    file:
        path: "{{ item }}"
        recurse: true
        state: directory
    with_items:
      - "{{ oc_target_location }}"
      - "{{ oc_arch | dirname }}"

  - name: "Get client binary archive"
    get_url:
      url: "{{ oc_release_url }}"
      dest: "{{ oc_arch }}"
    register: get_client
    until: get_client is success
    retries: 12
    delay: 10

  - name: "Unpack the binary"
    unarchive:
      src: "{{ oc_arch }}"
      dest: "{{ oc_arch | dirname }}"
      remote_src: yes

  - name: "Install newly downloaded oc binary"
    copy:
      src: "{{ oc_arch | dirname }}/oc"
      dest: "{{ oc_binary }}"
      mode: 0755
      remote_src: True

  - name: "Remove oc binary archive directory"
    file:
      path: "{{ oc_arch | dirname }}"
      state: absent

  when: not oc_installed.stat.exists

- name: Ensure source kubeconfig dir was created
  file:
    state: directory
    recurse: true
    path: "{{ kubeconfig | dirname }}"
